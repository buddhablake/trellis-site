This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-12-04T00:26:33.722Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
app/
  api/
    setup-notion-database/
      route.ts
    submit-assessment/
      route.ts
    update-assessment/
      route.ts
  assessment/
    page.tsx
  assessment-complete/
    page.tsx
  fonts.ts
  globals.css
  layout.tsx
  page.tsx
components/
  assessment/
    AssessmentForm.tsx
    GuidanceText.tsx
    ProgressBar.tsx
    QuestionCard.tsx
  forms/
    assessment-dialog.tsx
    assessment-form.tsx
  layout/
    container.tsx
    section.tsx
  sections/
    final-cta.tsx
    hero.tsx
    how-it-works.tsx
    index.ts
    social-proof.tsx
    value-proposition.tsx
  ui/
    button.tsx
    card.tsx
    dialog.tsx
    form.tsx
    input.tsx
    label.tsx
    organic-pattern.tsx
    scroll-reveal.tsx
hooks/
  use-scroll-animation.ts
lib/
  utils.ts
types/
  assessment.ts
utils/
  emailService.ts
  notion.ts
.eslintrc.json
.gitignore
components.json
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: app/api/setup-notion-database/route.ts
================
import { NextResponse } from "next/server";
import { Client } from "@notionhq/client";

const notion = new Client({
  auth: process.env.NOTION_API_KEY,
});

export async function GET() {
  try {
    // First, create a page to host our database
    const parentPage = await notion.pages.create({
      parent: {
        type: "page_id",
        page_id: process.env.NOTION_ROOT_PAGE_ID!,
      },
      properties: {
        title: {
          type: "title",
          title: [
            {
              type: "text",
              text: {
                content: "Cultivate Assessments",
              },
            },
          ],
        },
      },
    });

    // Then create the database within that page
    const response = await notion.databases.create({
      parent: {
        type: "page_id",
        page_id: parentPage.id,
      },
      icon: {
        type: "emoji",
        emoji: "ðŸ“‹",
      },
      title: [
        {
          type: "text",
          text: {
            content: "Assessment Submissions",
          },
        },
      ],
      properties: {
        Name: {
          title: {}, // This is required as the primary property
        },
        "First Name": {
          type: "rich_text",
          rich_text: {},
        },
        "Last Name": {
          type: "rich_text",
          rich_text: {},
        },
        "Business Name": {
          type: "rich_text",
          rich_text: {},
        },
        "Business Website": {
          type: "url",
          url: {},
        },
        Email: {
          type: "email",
          email: {},
        },
        "Submission Date": {
          type: "created_time",
          created_time: {},
        },
      },
    });

    return NextResponse.json({
      success: true,
      message: "Database created successfully",
      databaseId: response.id,
      pageId: parentPage.id,
    });
  } catch (error) {
    console.error("Error creating Notion database:", error);
    return NextResponse.json(
      { error: "Error creating Notion database" },
      { status: 500 }
    );
  }
}

================
File: app/api/submit-assessment/route.ts
================
import { NextResponse } from "next/server";
import { Client } from "@notionhq/client";
import { sendConfirmationEmail } from "@/utils/emailService";

const notion = new Client({
  auth: process.env.NOTION_API_KEY,
});

export async function POST(request: Request) {
  try {
    const body = await request.json();

    const { firstName, lastName, businessName, businessWebsite, email } = body;

    const response = await notion.pages.create({
      parent: {
        database_id: process.env.NOTION_DATABASE_ID!,
      },
      properties: {
        Name: {
          title: [
            {
              text: {
                content: `${firstName} ${lastName}`,
              },
            },
          ],
        },
        "First Name": {
          rich_text: [{ text: { content: firstName } }],
        },
        "Last Name": {
          rich_text: [{ text: { content: lastName } }],
        },
        "Business Name": {
          rich_text: [{ text: { content: businessName } }],
        },
        "Business Website": {
          url: businessWebsite,
        },
        Email: {
          email: email,
        },
      },
    });

    await notion.pages.update({
      page_id: response.id,
      properties: {
        "Page ID": {
          rich_text: [{ text: { content: response.id } }],
        },
      },
    });

    // Send confirmation email
    const emailSent = await sendConfirmationEmail({
      firstName,
      email,
      businessName,
      pageId: response.id,
    });

    if (!emailSent) {
      console.warn("Failed to send confirmation email to:", email);
      // We don't return an error since the assessment was still created successfully
    } else {
      console.log("Confirmation email sent to:", email);
    }

    return NextResponse.json({ success: true, data: response });
  } catch (error) {
    console.error("Error submitting to Notion:", error);
    return NextResponse.json(
      { error: "Error submitting assessment" },
      { status: 500 }
    );
  }
}

================
File: app/api/update-assessment/route.ts
================
import { NextResponse } from "next/server";
import { validateNotionPageId, updateNotionPage } from "@/utils/notion";

export async function POST(request: Request) {
  try {
    const { pageId, answers } = await request.json();

    if (!pageId) {
      return NextResponse.json(
        { error: "Page ID is required" },
        { status: 400 }
      );
    }

    // Validate the page ID
    const isValid = await validateNotionPageId(pageId);
    if (!isValid) {
      return NextResponse.json(
        { error: "Invalid or inaccessible page ID" },
        { status: 404 }
      );
    }

    // Update the page with formatted answers
    const response = await updateNotionPage(pageId, answers);

    return NextResponse.json({ success: true, data: response });
  } catch (error) {
    console.error("Error updating assessment:", error);
    return NextResponse.json(
      { error: "Failed to update assessment" },
      { status: 500 }
    );
  }
}

================
File: app/assessment/page.tsx
================
"use client";

import { Suspense } from "react";
import { AssessmentForm } from "@/components/assessment/AssessmentForm";

export default function Assessment() {
  return (
    <div className="min-h-screen bg-gray-50 py-8">
      <Suspense fallback={<div className="p-4 text-center">Loading...</div>}>
        <AssessmentForm />
      </Suspense>
    </div>
  );
}

================
File: app/assessment-complete/page.tsx
================
export default function AssessmentComplete() {
  return (
    <div className="max-w-4xl mx-auto p-8 text-center">
      <h1 className="text-4xl font-bold text-forest mb-6">
        Assessment Submitted Successfully
      </h1>

      <div className="bg-white p-8 rounded-lg shadow-sm">
        <p className="text-xl mb-6">
          Thank you for completing your assessment. We&apos;ve received your
          responses and will review them carefully.
        </p>

        <p className="text-gray-600 mb-8">
          We&apos;ll be in touch soon to discuss your insights and explore how
          we can help your business grow.
        </p>

        <a
          href="/"
          className="inline-block px-6 py-3 bg-forest text-white rounded hover:bg-forest/90 transition-colors"
        >
          Return Home
        </a>
      </div>
    </div>
  );
}

================
File: app/fonts.ts
================
import { Source_Serif_4, DM_Sans } from 'next/font/google'

export const freight = DM_Sans({
  subsets: ['latin'],
  variable: '--font-freight',
  weight: ['400', '500', '700'],
})

export const source = Source_Serif_4({
  subsets: ['latin'],
  variable: '--font-source',
  weight: ['400', '600'],
})

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  font-family: Arial, Helvetica, sans-serif;
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 48 33% 97%;
    --foreground: 27 15% 11%;
    --card: 48 33% 97%;
    --card-foreground: 27 15% 11%;
    --popover: 48 33% 97%;
    --popover-foreground: 27 15% 11%;
    --primary: 144 26% 23%;
    --primary-foreground: 48 33% 97%;
    --secondary: 30 39% 39%;
    --secondary-foreground: 48 33% 97%;
    --muted: 89 15% 61%;
    --muted-foreground: 27 15% 11%;
    --accent: 89 15% 61%;
    --accent-foreground: 27 15% 11%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 48 33% 97%;
    --border: 27 15% 11%;
    --input: 27 15% 11%;
    --ring: 144 26% 23%;
    --radius: 0.5rem;
  }
  .dark {
    --background: 240 10% 3.9%;
    --foreground: 0 0% 98%;
    --card: 240 10% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 240 10% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 240 5.9% 10%;
    --secondary: 240 3.7% 15.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 240 3.7% 15.9%;
    --muted-foreground: 240 5% 64.9%;
    --accent: 240 3.7% 15.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 240 3.7% 15.9%;
    --input: 240 3.7% 15.9%;
    --ring: 240 4.9% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-cream text-soil;
  }
  h1, h2, h3, h4, h5, h6 {
    @apply font-heading;
  }
  p, span, div {
    @apply font-body;
  }
}

================
File: app/layout.tsx
================
import type { Metadata } from "next";
import { freight, source } from "./fonts";
import "./globals.css";

export const metadata: Metadata = {
  title: "Cultivate by Trellis - Discover Your Natural Path to Growth",
  description: "Stop forcing someone else's business model. Start cultivating growth that feels authentically yours.",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className={`${freight.variable} ${source.variable}`}>
      <body className="antialiased">{children}</body>
    </html>
  );
}

================
File: app/page.tsx
================
import { Hero } from "@/components/sections/hero"
import { HowItWorks } from "@/components/sections/how-it-works"
import { ValueProposition } from "@/components/sections/value-proposition"
import { SocialProof } from "@/components/sections/social-proof"
import { FinalCTA } from "@/components/sections/final-cta"

export default function Home() {
  return (
    <main className="min-h-screen">
      <Hero />
      <HowItWorks />
      <ValueProposition />
      <SocialProof />
      <FinalCTA />
    </main>
  )
}

export const metadata = {
  title: 'Trellis | Cultivate Your Business Growth',
  description: 'Discover your natural path to business growth with Trellis. Our Cultivate Assessment helps you understand your unique strengths and authentic market position.',
}

================
File: components/assessment/AssessmentForm.tsx
================
"use client";

import { useEffect, useState } from "react";
import { useSearchParams } from "next/navigation";
import { ASSESSMENT_QUESTIONS } from "@/types/assessment";
import { ProgressBar } from "./ProgressBar";
import { QuestionCard } from "./QuestionCard";

interface Answers {
  [key: number]: string;
}

export function AssessmentForm() {
  const searchParams = useSearchParams();
  const pageId = searchParams.get("id");
  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);
  const [answers, setAnswers] = useState<Answers>(() => {
    // Try to load saved answers from localStorage
    if (typeof window !== "undefined") {
      const saved = localStorage.getItem(`assessment-${pageId}`);
      return saved ? JSON.parse(saved) : {};
    }
    return {};
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [error, setError] = useState<string | null>(null);

  // Save answers to localStorage whenever they change
  useEffect(() => {
    if (pageId) {
      localStorage.setItem(`assessment-${pageId}`, JSON.stringify(answers));
    }
  }, [answers, pageId]);

  if (!pageId) {
    return (
      <div className="p-4">
        <h1 className="text-xl text-red-600">
          Error: No assessment ID provided
        </h1>
        <p>Please use the link provided in your email.</p>
      </div>
    );
  }

  const handleAnswerChange = (answer: string) => {
    setAnswers((prev) => ({
      ...prev,
      [ASSESSMENT_QUESTIONS[currentQuestionIndex].id]: answer,
    }));
  };

  const handleNext = () => {
    if (currentQuestionIndex < ASSESSMENT_QUESTIONS.length - 1) {
      setCurrentQuestionIndex((prev) => prev + 1);
    }
  };

  const handlePrevious = () => {
    if (currentQuestionIndex > 0) {
      setCurrentQuestionIndex((prev) => prev - 1);
    }
  };

  const handleSubmit = async () => {
    setIsSubmitting(true);
    setError(null);

    try {
      // Format answers as an array of question-answer pairs
      const formattedAnswers = ASSESSMENT_QUESTIONS.map((q) => ({
        question: q.text,
        answer: answers[q.id] || "*No answer provided*",
      }));

      const response = await fetch("/api/update-assessment", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          pageId,
          answers: formattedAnswers,
        }),
      });

      if (!response.ok) {
        throw new Error("Failed to submit assessment");
      }

      // Clear localStorage after successful submission
      localStorage.removeItem(`assessment-${pageId}`);

      // Redirect to success page
      window.location.href = "/assessment-complete";
    } catch (err) {
      setError(
        err instanceof Error
          ? err.message
          : "An error occurred while submitting"
      );
    } finally {
      setIsSubmitting(false);
    }
  };

  const currentQuestion = ASSESSMENT_QUESTIONS[currentQuestionIndex];

  return (
    <div className="max-w-4xl mx-auto p-4">
      <ProgressBar
        current={currentQuestionIndex + 1}
        total={ASSESSMENT_QUESTIONS.length}
      />

      <QuestionCard
        question={currentQuestion.text}
        guidance={currentQuestion.guidance}
        answer={answers[currentQuestion.id] || ""}
        onAnswerChange={handleAnswerChange}
        isLastQuestion={
          currentQuestionIndex === ASSESSMENT_QUESTIONS.length - 1
        }
        onNext={handleNext}
        onPrevious={handlePrevious}
        onSubmit={handleSubmit}
        currentQuestion={currentQuestionIndex + 1}
        isSubmitting={isSubmitting}
      />

      {error && (
        <div className="mt-4 p-4 bg-red-50 text-red-600 rounded">{error}</div>
      )}
    </div>
  );
}

================
File: components/assessment/GuidanceText.tsx
================
interface GuidanceTextProps {
  text: string;
}

export function GuidanceText({ text }: GuidanceTextProps) {
  return (
    <div className="bg-forest/5 border-l-4 border-forest p-4 my-4 rounded">
      <p className="text-sm text-gray-600">{text}</p>
    </div>
  );
}

================
File: components/assessment/ProgressBar.tsx
================
interface ProgressBarProps {
  current: number;
  total: number;
}

export function ProgressBar({ current, total }: ProgressBarProps) {
  const percentage = Math.round((current / total) * 100);

  return (
    <div className="w-full mb-8">
      <div className="flex justify-between text-sm text-forest mb-2">
        <span>
          Question {current} of {total}
        </span>
        <span>{percentage}% Complete</span>
      </div>
      <div className="w-full bg-gray-200 rounded-full h-2.5">
        <div
          className="bg-forest h-2.5 rounded-full transition-all duration-500 ease-out"
          style={{ width: `${percentage}%` }}
        />
      </div>
    </div>
  );
}

================
File: components/assessment/QuestionCard.tsx
================
import { GuidanceText } from "./GuidanceText";
import { useState } from "react";

interface QuestionCardProps {
  question: string;
  guidance: string;
  answer: string;
  onAnswerChange: (answer: string) => void;
  isLastQuestion: boolean;
  onNext: () => void;
  onPrevious: () => void;
  onSubmit: () => void;
  currentQuestion: number;
  isSubmitting?: boolean;
}

export function QuestionCard({
  question,
  guidance,
  answer,
  onAnswerChange,
  isLastQuestion,
  onNext,
  onPrevious,
  onSubmit,
  currentQuestion,
  isSubmitting,
}: QuestionCardProps) {
  const [showEncouragement, setShowEncouragement] = useState(false);
  const MIN_CHARS = 100;

  const handleNext = () => {
    if (answer.length < MIN_CHARS) {
      setShowEncouragement(true);
      return;
    }
    setShowEncouragement(false);
    onNext();
  };

  const handleSubmit = () => {
    if (answer.length < MIN_CHARS) {
      setShowEncouragement(true);
      return;
    }
    setShowEncouragement(false);
    onSubmit();
  };

  return (
    <div className="w-full max-w-2xl mx-auto p-6 bg-white rounded-lg shadow-sm">
      <h2 className="text-2xl font-semibold text-gray-800 mb-4">{question}</h2>
      <GuidanceText text={guidance} />

      <textarea
        value={answer}
        onChange={(e) => {
          onAnswerChange(e.target.value);
          if (e.target.value.length >= MIN_CHARS) {
            setShowEncouragement(false);
          }
        }}
        className="w-full h-48 p-4 border rounded-lg focus:ring-2 focus:ring-forest focus:border-transparent"
        placeholder="Share your thoughts..."
      />

      {showEncouragement && (
        <div className="mt-2 text-amber-600">
          <p>
            Your insights are valuable! Could you elaborate a bit more? The more
            detail you provide, the better we can understand your unique
            situation.
          </p>
        </div>
      )}

      <div className="flex justify-between mt-6">
        <button
          onClick={onPrevious}
          disabled={currentQuestion === 1}
          className="px-6 py-2 text-forest border border-forest rounded hover:bg-forest/5 disabled:opacity-50 disabled:hover:bg-transparent"
        >
          Previous
        </button>

        {!isLastQuestion ? (
          <button
            onClick={handleNext}
            className="px-6 py-2 bg-forest text-white rounded hover:bg-forest/90"
          >
            Next
          </button>
        ) : (
          <button
            onClick={handleSubmit}
            disabled={isSubmitting}
            className="px-6 py-2 bg-forest text-white rounded hover:bg-forest/90 disabled:opacity-50"
          >
            {isSubmitting ? "Submitting..." : "Submit"}
          </button>
        )}
      </div>
    </div>
  );
}

================
File: components/forms/assessment-dialog.tsx
================
"use client";

import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { AssessmentForm } from "./assessment-form"

interface AssessmentDialogProps {
  trigger?: React.ReactNode
  className?: string
  variant?: "default" | "outline"
}

export function AssessmentDialog({
  trigger,
  className,
  variant = "default",
}: AssessmentDialogProps) {
  return (
    <Dialog>
      <DialogTrigger asChild>
        {trigger || (
          <Button className={className} variant={variant}>
            Start Your Assessment
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="sm:max-w-[500px]">
        <DialogHeader>
          <DialogTitle className="text-h3 font-heading font-semibold text-forest">
            Start Your Cultivate Assessment
          </DialogTitle>
          <DialogDescription className="text-soil/80">
            Take 15-20 minutes to reflect on your business journey and discover your natural path to growth.
          </DialogDescription>
        </DialogHeader>
        <AssessmentForm />
      </DialogContent>
    </Dialog>
  )
}

================
File: components/forms/assessment-form.tsx
================
"use client";

import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";

const formSchema = z.object({
  firstName: z.string().min(2, "First name is required"),
  lastName: z.string().min(2, "Last name is required"),
  businessName: z.string().min(2, "Business name is required"),
  businessWebsite: z.string().url("Please enter a valid website URL"),
  email: z.string().email("Please enter a valid email address"),
});

type FormValues = z.infer<typeof formSchema>;

export function AssessmentForm() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);

  const form = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      firstName: "",
      lastName: "",
      businessName: "",
      businessWebsite: "",
      email: "",
    },
  });

  async function onSubmit(data: FormValues) {
    setIsSubmitting(true);
    try {
      const response = await fetch("/api/submit-assessment", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(data),
      });

      if (!response.ok) {
        throw new Error("Failed to submit assessment");
      }

      setIsSuccess(true);
    } catch (error) {
      console.error("Error:", error);
      form.setError("root", {
        message: "Something went wrong. Please try again.",
      });
    } finally {
      setIsSubmitting(false);
    }
  }

  return (
    <AnimatePresence mode="wait">
      {!isSuccess ? (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -20 }}
          className="w-full max-w-md mx-auto"
        >
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="firstName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>First Name</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="lastName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Last Name</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="businessName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Business Name</FormLabel>
                    <FormControl>
                      <Input {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="businessWebsite"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Business Website</FormLabel>
                    <FormControl>
                      <Input {...field} type="url" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email Address</FormLabel>
                    <FormControl>
                      <Input {...field} type="email" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button
                type="submit"
                className="w-full bg-forest hover:bg-forest/90"
                disabled={isSubmitting}
              >
                {isSubmitting ? "Starting Assessment..." : "Start Assessment"}
              </Button>
            </form>
          </Form>
        </motion.div>
      ) : (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center"
        >
          <div className="w-16 h-16 rounded-full bg-sage mx-auto mb-6 flex items-center justify-center">
            <svg
              className="w-8 h-8 text-cream"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M5 13l4 4L19 7"
              />
            </svg>
          </div>
          <h3 className="text-h3 font-heading font-semibold text-forest mb-2">
            Assessment Started!
          </h3>
          <p className="text-soil/80">
            Check your email for instructions to begin your Cultivate
            Assessment.
          </p>
        </motion.div>
      )}
    </AnimatePresence>
  );
}

================
File: components/layout/container.tsx
================
import { cn } from "@/lib/utils"
import { ReactNode } from "react"

interface ContainerProps {
  children: ReactNode
  className?: string
  as?: keyof JSX.IntrinsicElements
}

export function Container({
  children,
  className,
  as: Component = "div",
}: ContainerProps) {
  return (
    <Component
      className={cn(
        "mx-auto w-full max-w-screen-xl px-4 sm:px-6 lg:px-8",
        className
      )}
    >
      {children}
    </Component>
  )
}

================
File: components/layout/section.tsx
================
import { cn } from "@/lib/utils"
import { ReactNode } from "react"
import { Container } from "./container"

interface SectionProps {
  children: ReactNode
  className?: string
  containerClassName?: string
  fullWidth?: boolean
}

export function Section({
  children,
  className,
  containerClassName,
  fullWidth = false,
}: SectionProps) {
  return (
    <section
      className={cn(
        "relative py-16 sm:py-24",
        className
      )}
    >
      {fullWidth ? (
        children
      ) : (
        <Container className={containerClassName}>{children}</Container>
      )}
    </section>
  )
}

================
File: components/sections/final-cta.tsx
================
"use client";

import { Section } from "@/components/layout/section";
import { AssessmentDialog } from "@/components/forms/assessment-dialog";
import { ScrollReveal } from "@/components/ui/scroll-reveal";

export function FinalCTA() {
  return (
    <Section className="bg-forest text-cream relative">
      <div className="max-w-3xl mx-auto text-center relative z-10">
        <ScrollReveal>
          <h2 className="text-h2 font-heading font-semibold text-cream mb-6">
            Let&apos;s grow together
          </h2>
          <p className="text-lg text-cream/80 mb-8">
            Take the first step towards authentic business growth with our
            Cultivate Assessment. It&apos;s free, takes just 15-20 minutes, and
            could transform how you see your business.
          </p>
        </ScrollReveal>
        <ScrollReveal delay={0.2}>
          <AssessmentDialog
            className="bg-cream text-forest hover:bg-cream/90 transition-colors"
            variant="outline"
          />
        </ScrollReveal>
      </div>
      <div className="absolute inset-0 bg-[radial-gradient(circle_at_center,rgba(156,175,136,0.1)_0%,transparent_70%)]" />
    </Section>
  );
}

================
File: components/sections/hero.tsx
================
"use client";

import { Container } from "@/components/layout/container";
import { OrganicPattern } from "@/components/ui/organic-pattern";
import { AssessmentDialog } from "@/components/forms/assessment-dialog";
import { motion } from "framer-motion";

export function Hero() {
  return (
    <section className="relative min-h-[90vh] flex items-center bg-cream overflow-hidden">
      <OrganicPattern />
      <Container className="py-16 sm:py-24">
        <motion.div
          className="max-w-3xl"
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8, ease: "easeOut" }}
        >
          <h1 className="text-h1 font-heading font-semibold text-forest mb-6">
            Discover Your Natural Path to Growth
          </h1>
          <p className="text-lg text-soil/80 mb-8">
            We&apos;re here to help you cultivate sustainable growth
          </p>
          <AssessmentDialog className="bg-forest hover:bg-forest/90" />
        </motion.div>
      </Container>
    </section>
  );
}

================
File: components/sections/how-it-works.tsx
================
"use client";

import { Section } from "@/components/layout/section"
import { ScrollReveal } from "@/components/ui/scroll-reveal"

const steps = [
  {
    number: "01",
    heading: "Share Your Story",
    text: "Through our thoughtfully crafted assessment, tell us about your business journey, challenges, and vision. Take 15-20 minutes to reflect on what makes your business unique.",
  },
  {
    number: "02",
    heading: "Gain Clear Insight",
    text: "Receive your personalized Cultivate Report, revealing patterns and opportunities you might not see. Understand your natural strengths and authentic market position.",
  },
  {
    number: "03",
    heading: "Find Your Path",
    text: "Get specific guidance for growing your business in ways that feel right to you. No cookie-cutter solutions - just clear direction aligned with your values.",
  },
]

export function HowItWorks() {
  return (
    <Section className="bg-cream">
      <ScrollReveal>
        <h2 className="text-h2 font-heading font-semibold text-forest text-center mb-16">
          A Simple Process for Clarity
        </h2>
      </ScrollReveal>
      <div className="grid grid-cols-1 md:grid-cols-3 gap-8 md:gap-12">
        {steps.map((step, index) => (
          <ScrollReveal key={step.number} delay={index * 0.2}>
            <div className="relative">
              <div className="mb-4 text-2xl font-heading font-semibold text-earth">
                {step.number}
              </div>
              <h3 className="text-h3 font-heading font-semibold text-forest mb-4">
                {step.heading}
              </h3>
              <p className="text-soil/80">{step.text}</p>
            </div>
          </ScrollReveal>
        ))}
      </div>
    </Section>
  )
}

================
File: components/sections/index.ts
================
export { Hero } from './hero'
export { HowItWorks } from './how-it-works'
export { ValueProposition } from './value-proposition'
export { SocialProof } from './social-proof'
export { FinalCTA } from './final-cta'

================
File: components/sections/social-proof.tsx
================
"use client";

import { Section } from "@/components/layout/section";
import { Card, CardContent } from "@/components/ui/card";
import { ScrollReveal } from "@/components/ui/scroll-reveal";
import Image from "next/image";

const testimonials = [
  {
    quote:
      "Starting my own salon felt overwhelming until I worked with Trellis. They helped me discover my unique value in the market and translate it into a clear brand strategy. What sets them apart is how they truly understand small businesses and help you grow in ways that feel authentic. I now have complete confidence in my business's direction and value.",
    name: "Nic Graham",
    business: "Owner, Nics & Cuts",
    image: "/testimonials/nic_graham.jpeg",
  },
] as const;

export function SocialProof() {
  return (
    <Section>
      <ScrollReveal>
        <h2 className="text-h2 font-heading font-semibold text-forest text-center mb-16">
          Growing Their Own Way
        </h2>
      </ScrollReveal>
      <div className="grid grid-cols-1 gap-8">
        {testimonials.map((testimonial, index) => (
          <ScrollReveal key={testimonial.name} delay={index * 0.2}>
            <Card className="border-sage/20 hover:border-sage/40 transition-colors">
              <CardContent className="pt-6">
                <div className="flex items-start gap-4">
                  <div className="relative w-12 h-12 rounded-full overflow-hidden bg-sage/20 flex-shrink-0">
                    <Image
                      src={testimonial.image}
                      alt={testimonial.name}
                      width={48}
                      height={48}
                      className="object-cover"
                    />
                  </div>
                  <div>
                    <blockquote className="text-soil/80 mb-4 italic">
                      &quot;{testimonial.quote}&quot;
                    </blockquote>
                    <cite className="not-italic">
                      <div className="font-heading font-semibold text-forest">
                        {testimonial.name}
                      </div>
                      <div className="text-soil/60 text-sm">
                        {testimonial.business}
                      </div>
                    </cite>
                  </div>
                </div>
              </CardContent>
            </Card>
          </ScrollReveal>
        ))}
      </div>
    </Section>
  );
}

================
File: components/sections/value-proposition.tsx
================
"use client";

import { Section } from "@/components/layout/section";
import { ScrollReveal } from "@/components/ui/scroll-reveal";

const benefits = [
  "See your natural strengths clearly",
  "Understand your authentic market position",
  "Find growth opportunities that feel right",
  "Build confidence in your approach",
] as const;

export function ValueProposition() {
  return (
    <Section className="bg-cream/50 relative">
      <div className="absolute inset-0 bg-gradient-to-b from-transparent via-sage/5 to-transparent" />
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 lg:gap-24 relative">
        <ScrollReveal>
          <div>
            <h2 className="text-h2 font-heading font-semibold text-forest mb-6">
              Cultivate Your Unique Value
            </h2>
            <p className="text-lg text-soil/80 mb-8">
              Here&apos;s how we can help your business grow
            </p>
          </div>
        </ScrollReveal>
        <div className="space-y-6">
          {benefits.map((benefit, index) => (
            <ScrollReveal key={benefit} delay={index * 0.1}>
              <div className="flex items-start gap-4">
                <div className="w-6 h-6 rounded-full bg-sage flex items-center justify-center mt-1">
                  <svg
                    className="w-4 h-4 text-cream"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      strokeWidth={2}
                      d="M5 13l4 4L19 7"
                    />
                  </svg>
                </div>
                <p className="text-lg text-soil/80">{benefit}</p>
              </div>
            </ScrollReveal>
          ))}
        </div>
      </div>
    </Section>
  );
}

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: components/ui/form.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { Slot } from "@radix-ui/react-slot"
import {
  Controller,
  ControllerProps,
  FieldPath,
  FieldValues,
  FormProvider,
  useFormContext,
} from "react-hook-form"

import { cn } from "@/lib/utils"
import { Label } from "@/components/ui/label"

const Form = FormProvider

type FormFieldContextValue<
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
> = {
  name: TName
}

const FormFieldContext = React.createContext<FormFieldContextValue>(
  {} as FormFieldContextValue
)

const FormField = <
  TFieldValues extends FieldValues = FieldValues,
  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>
>({
  ...props
}: ControllerProps<TFieldValues, TName>) => {
  return (
    <FormFieldContext.Provider value={{ name: props.name }}>
      <Controller {...props} />
    </FormFieldContext.Provider>
  )
}

const useFormField = () => {
  const fieldContext = React.useContext(FormFieldContext)
  const itemContext = React.useContext(FormItemContext)
  const { getFieldState, formState } = useFormContext()

  const fieldState = getFieldState(fieldContext.name, formState)

  if (!fieldContext) {
    throw new Error("useFormField should be used within <FormField>")
  }

  const { id } = itemContext

  return {
    id,
    name: fieldContext.name,
    formItemId: `${id}-form-item`,
    formDescriptionId: `${id}-form-item-description`,
    formMessageId: `${id}-form-item-message`,
    ...fieldState,
  }
}

type FormItemContextValue = {
  id: string
}

const FormItemContext = React.createContext<FormItemContextValue>(
  {} as FormItemContextValue
)

const FormItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const id = React.useId()

  return (
    <FormItemContext.Provider value={{ id }}>
      <div ref={ref} className={cn("space-y-2", className)} {...props} />
    </FormItemContext.Provider>
  )
})
FormItem.displayName = "FormItem"

const FormLabel = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>
>(({ className, ...props }, ref) => {
  const { error, formItemId } = useFormField()

  return (
    <Label
      ref={ref}
      className={cn(error && "text-destructive", className)}
      htmlFor={formItemId}
      {...props}
    />
  )
})
FormLabel.displayName = "FormLabel"

const FormControl = React.forwardRef<
  React.ElementRef<typeof Slot>,
  React.ComponentPropsWithoutRef<typeof Slot>
>(({ ...props }, ref) => {
  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()

  return (
    <Slot
      ref={ref}
      id={formItemId}
      aria-describedby={
        !error
          ? `${formDescriptionId}`
          : `${formDescriptionId} ${formMessageId}`
      }
      aria-invalid={!!error}
      {...props}
    />
  )
})
FormControl.displayName = "FormControl"

const FormDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => {
  const { formDescriptionId } = useFormField()

  return (
    <p
      ref={ref}
      id={formDescriptionId}
      className={cn("text-[0.8rem] text-muted-foreground", className)}
      {...props}
    />
  )
})
FormDescription.displayName = "FormDescription"

const FormMessage = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, children, ...props }, ref) => {
  const { error, formMessageId } = useFormField()
  const body = error ? String(error?.message) : children

  if (!body) {
    return null
  }

  return (
    <p
      ref={ref}
      id={formMessageId}
      className={cn("text-[0.8rem] font-medium text-destructive", className)}
      {...props}
    >
      {body}
    </p>
  )
})
FormMessage.displayName = "FormMessage"

export {
  useFormField,
  Form,
  FormItem,
  FormLabel,
  FormControl,
  FormDescription,
  FormMessage,
  FormField,
}

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: components/ui/organic-pattern.tsx
================
"use client";

export function OrganicPattern() {
  return (
    <div className="absolute inset-0 overflow-hidden pointer-events-none">
      <svg
        className="absolute w-[1000px] h-[1000px] -right-[400px] -top-[400px] text-forest/5"
        viewBox="0 0 1000 1000"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          fill="currentColor"
          d="M500,500 Q750,250 1000,500 T1500,500 T2000,500 T2500,500"
          transform="rotate(45, 500, 500)"
        />
        <path
          fill="currentColor"
          d="M0,500 Q250,750 500,500 T1000,500 T1500,500 T2000,500"
          transform="rotate(-45, 500, 500)"
        />
      </svg>
      <svg
        className="absolute w-[800px] h-[800px] -left-[300px] -bottom-[300px] text-sage/5"
        viewBox="0 0 1000 1000"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          fill="currentColor"
          d="M500,500 Q750,250 1000,500 T1500,500 T2000,500 T2500,500"
          transform="rotate(135, 500, 500)"
        />
        <path
          fill="currentColor"
          d="M0,500 Q250,750 500,500 T1000,500 T1500,500 T2000,500"
          transform="rotate(-135, 500, 500)"
        />
      </svg>
    </div>
  )
}

================
File: components/ui/scroll-reveal.tsx
================
"use client";

import { motion } from "framer-motion"
import { useScrollAnimation } from "@/hooks/use-scroll-animation"

interface ScrollRevealProps {
  children: React.ReactNode
  className?: string
  delay?: number
}

export function ScrollReveal({
  children,
  className,
  delay = 0,
}: ScrollRevealProps) {
  const { ref, isInView } = useScrollAnimation()

  return (
    <motion.div
      ref={ref}
      initial={{ opacity: 0, y: 20 }}
      animate={isInView ? { opacity: 1, y: 0 } : { opacity: 0, y: 20 }}
      transition={{
        duration: 0.8,
        delay: delay,
        ease: "easeOut",
      }}
      className={className}
    >
      {children}
    </motion.div>
  )
}

================
File: hooks/use-scroll-animation.ts
================
"use client";
import { useEffect, useRef, useState } from "react";
import { useInView } from "framer-motion";

export function useScrollAnimation(threshold = 0.2) {
  const ref = useRef<HTMLDivElement>(null);
  const isInView = useInView(ref, {
    once: true,
    amount: threshold,
  });
  const [hasAnimated, setHasAnimated] = useState(false);

  useEffect(() => {
    if (isInView && !hasAnimated) {
      setHasAnimated(true);
    }
  }, [isInView, hasAnimated]);

  return { ref, isInView, hasAnimated };
}

================
File: lib/utils.ts
================
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

================
File: types/assessment.ts
================
export interface Question {
  id: number;
  text: string;
  guidance: string;
}

export const ASSESSMENT_QUESTIONS: Question[] = [
  {
    id: 1,
    text: "When you talk about your business, what do you find hardest to explain?",
    guidance:
      "Think about conversations where you've struggled to convey your value. What aspects feel unclear or complex? Share specific examples if possible.",
  },
  {
    id: 2,
    text: "What's the biggest difference between how you imagined your business and how it actually is?",
    guidance:
      "Consider both practical and emotional aspects. What surprises, challenges, or unexpected realizations have you encountered?",
  },
  {
    id: 3,
    text: "Think of your best client relationship - what makes it work so well?",
    guidance:
      "Describe the relationship dynamics, communication patterns, and what makes this client different from others.",
  },
  {
    id: 4,
    text: "Where do you feel pressure to be something you're not in your business?",
    guidance:
      "Consider industry standards, competitor approaches, or market expectations that feel misaligned with your values.",
  },
  {
    id: 5,
    text: "What would make you feel truly successful beyond revenue?",
    guidance:
      "Think about personal fulfillment, community impact, and long-term vision. What would make you proud?",
  },
  {
    id: 6,
    text: "How has your business grown so far, and what feels natural or forced about that growth?",
    guidance:
      "Think about the different ways your business has evolved - not just in size, but in capabilities, relationships, and impact. What growth felt natural? What felt forced?",
  },
  {
    id: 7,
    text: "How does your business currently interact with your larger community?",
    guidance:
      "Think about relationships with other businesses, community organizations, and your local ecosystem.",
  },
  {
    id: 8,
    text: "What existing resources or strengths do you feel are underutilized in your business?",
    guidance:
      "Consider skills, relationships, tools, or knowledge that could be better leveraged.",
  },
  {
    id: 9,
    text: "When you imagine your business three years from now, what does sustainable success look like?",
    guidance:
      "Paint a picture of your ideal future state, considering both business health and personal fulfillment.",
  },
];

================
File: utils/emailService.ts
================
import * as emailjs from "@emailjs/nodejs";

interface EmailParams {
  firstName: string;
  email: string;
  businessName: string;
  pageId: string;
}

export async function sendConfirmationEmail({
  firstName,
  email,
  businessName,
  pageId,
}: EmailParams): Promise<boolean> {
  try {
    const response = await emailjs.send(
      process.env.EMAILJS_SERVICE_ID!,
      process.env.EMAILJS_TEMPLATE_ID!,
      {
        to_name: firstName,
        business_name: businessName,
        page_id: pageId,
        to_email: email,
        from_name: "Blake @ TrellisGrow",
        reply_to: "blake@trellisgrow.com",
        subject: "Take Your Next Step with Cultivate | Your Assessment Awaits",
        message:
          "Your assessment is ready to be completed. Click the link below to get started.",
        link: `https://trellisgrow.com/assessment?id=${pageId}`,
      },
      {
        publicKey: process.env.EMAILJS_PUBLIC_KEY!,
        privateKey: process.env.EMAILJS_PRIVATE_KEY!,
      }
    );

    return response.status === 200;
  } catch (error) {
    console.error("Error sending confirmation email:", error);
    return false;
  }
}

================
File: utils/notion.ts
================
import { Client } from "@notionhq/client";
import { BlockObjectRequest } from "@notionhq/client/build/src/api-endpoints";

const notion = new Client({
  auth: process.env.NOTION_API_KEY,
});

export async function validateNotionPageId(pageId: string): Promise<boolean> {
  try {
    await notion.pages.retrieve({ page_id: pageId });
    return true;
  } catch (error) {
    console.error("Error validating Notion page:", error);
    return false;
  }
}

interface QuestionAnswer {
  question: string;
  answer: string;
}

export async function updateNotionPage(
  pageId: string,
  answers: QuestionAnswer[]
) {
  try {
    // Create blocks for each question-answer pair
    const blocks: BlockObjectRequest[] = answers.map((qa) => ({
      object: "block",
      type: "paragraph",
      paragraph: {
        rich_text: [
          {
            type: "text",
            text: {
              content: `## ${qa.question}\n\n${
                qa.answer || "*No answer provided*"
              }\n\n---\n`,
            },
          },
        ],
      },
    }));

    const response = await notion.blocks.children.append({
      block_id: pageId,
      children: blocks,
    });

    return response;
  } catch (error) {
    console.error("Error updating Notion page:", error);
    throw error;
  }
}

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "zinc",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

================
File: package.json
================
{
  "name": "trellis-site",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@emailjs/browser": "^4.4.1",
    "@emailjs/nodejs": "^5.0.2",
    "@hookform/resolvers": "^3.9.1",
    "@notionhq/client": "^2.2.15",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-slot": "^1.1.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "framer-motion": "^11.12.0",
    "lucide-react": "^0.462.0",
    "next": "14.2.16",
    "react": "^18",
    "react-dom": "^18",
    "react-hook-form": "^7.53.2",
    "tailwind-merge": "^2.5.5",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "14.2.16",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  darkMode: ["class"],
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        forest: '#2C4A3B',
        earth: '#8B5E3C',
        sage: '#9CAF88',
        cream: '#F8F6F2',
        soil: '#2A2118',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))'
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))'
        },
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))'
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))'
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))'
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))'
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))'
        },
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
      },
      fontSize: {
        'h1': ['2.5rem', { lineHeight: '1.2' }],
        'h2': ['2rem', { lineHeight: '1.2' }],
        'h3': ['1.5rem', { lineHeight: '1.2' }],
        'body': ['1rem', { lineHeight: '1.6' }],
      },
      fontFamily: {
        'heading': ['var(--font-freight)', 'system-ui', 'sans-serif'],
        'body': ['var(--font-source)', 'Georgia', 'serif'],
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config;
export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
